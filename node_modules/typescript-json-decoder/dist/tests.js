"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.employeeDecoder = void 0;
var higher_order_decoders_1 = require("./higher-order-decoders");
var index_1 = require("./index");
var discriminatedUnion = index_1.union({ discriminant: index_1.literal('one') }, { discriminant: index_1.literal('two'), data: index_1.string });
var message = index_1.union(index_1.tuple('message', index_1.string), index_1.tuple('something-else', { somestuff: index_1.string }));
// test impl
var always = function (x) { return function (json) { return x; }; };
exports.employeeDecoder = index_1.record({
    renamedfield: index_1.field('phoneNumbers', index_1.array(index_1.string)),
    month2: index_1.fields({ dateOfBirth: index_1.date }, function (_a) {
        var dateOfBirth = _a.dateOfBirth;
        return dateOfBirth.getMonth();
    }),
    maybessn: index_1.fields({ ssn: index_1.optional(index_1.string) }, function (_a) {
        var ssn = _a.ssn;
        return ssn;
    }),
    employeeIdentifier2: index_1.fields({ name: index_1.string, employeeId: index_1.optional(index_1.number) }, function (_a) {
        var name = _a.name, employeeId = _a.employeeId;
        return name + ":" + (employeeId || 0);
    }),
    month: index_1.field('dateOfBirth', function (x) { return index_1.date(x).getMonth(); }),
    employeeIdentifier: index_1.fields({
        name: index_1.string,
        employeeId: index_1.number,
    }, function (_a) {
        var name = _a.name, employeeId = _a.employeeId;
        return name + ":" + employeeId;
    }),
    employeeId: index_1.number,
    name: index_1.string,
    set: index_1.set(index_1.union(index_1.string, index_1.number, { data: index_1.boolean })),
    employees: index_1.map({
        employeeId: index_1.number,
        name: index_1.string,
        ssn: index_1.optional(index_1.string),
    }, function (x) { return x.employeeId; }),
    dict: index_1.dict(index_1.union(index_1.string, index_1.number)),
    phoneNumbers: index_1.array(index_1.string),
    address: {
        city: index_1.string,
    },
    secondAddrese: index_1.optional({ city: index_1.string, option: index_1.optional(index_1.number) }),
    ageAndReputation: [index_1.number, index_1.string],
    discriminatedUnion: discriminatedUnion,
    message: message,
    uni: index_1.union('uni', { lol: index_1.string }),
    likes: index_1.array([index_1.literal('likt'), index_1.number]),
    likes2: index_1.array(index_1.tuple('likt', index_1.number)),
    isEmployed: index_1.boolean,
    dateOfBirth: index_1.date,
    ssn: index_1.optional(index_1.string),
    girlfriend: higher_order_decoders_1.nullable(index_1.string),
    test: index_1.fields({ girlfriend: higher_order_decoders_1.nullable(index_1.string), dateOfBirth: index_1.date }, function (_a) {
        var girlfriend = _a.girlfriend, dateOfBirth = _a.dateOfBirth;
        return girlfriend !== null && girlfriend !== void 0 ? girlfriend : dateOfBirth;
    }),
    just: index_1.array(index_1.union(index_1.boolean, always(false))),
});
var x = exports.employeeDecoder({
    employeeId: 2,
    name: 'asdfasd',
    set: ['7', 7, { data: true }],
    employees: [
        { employeeId: 1, name: 'lollern' },
        { employeeId: 3, name: 'other guy', ssn: '4' },
    ],
    dict: { somestuff: 'lol', morestuff: 7 },
    message: ['something-else', { somestuff: 'a' }],
    discriminatedUnion: { discriminant: 'two', data: '2' },
    address: { city: 'asdf' },
    secondAddrese: { city: 'secondcity' },
    uni: 'uni',
    likes: [
        ['likt', 3],
        ['likt', 0],
    ],
    likes2: [
        ['likt', 1],
        ['likt', 2],
    ],
    phoneNumbers: ['733', 'dsfadadsa', '', '4'],
    ageAndReputation: [12, 'good'],
    dateOfBirth: '1995-12-14T00:00:00.0Z',
    isEmployed: true,
    girlfriend: null,
    just: ["blah", true, false],
});
var fooDecoder = index_1.record({
    bar: index_1.optional(index_1.string),
    baz: index_1.string,
});
var myFoo = fooDecoder({
    baz: 'foobar',
});
console.log(x, myFoo);
