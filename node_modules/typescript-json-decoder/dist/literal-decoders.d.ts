import { decodeType, Decoder, DecoderFunction, JsonLiteralForm } from './types';
export declare const literal: <p extends JsonLiteralForm>(literal: p) => DecoderFunction<p>;
export declare const tuple: <A extends Decoder<unknown>, B extends Decoder<unknown>>(decoderA: A, decoderB: B) => DecoderFunction<[decodeType<A>, decodeType<B>]>;
export declare const fieldDecoder: unique symbol;
export declare const fields: <T extends {
    [key: string]: Decoder<unknown>;
}, U>(decoder: T, continuation: (x: decodeType<T>) => U) => DecoderFunction<U>;
export declare const field: <T>(key: string, decoder: Decoder<T>) => DecoderFunction<T>;
export declare const record: <schema extends {
    [key: string]: Decoder<unknown>;
}>(s: schema) => DecoderFunction<decodeType<schema>>;
