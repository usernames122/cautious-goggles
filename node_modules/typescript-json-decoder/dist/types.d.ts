/**
 * Json Literal Decoder
 * literal javascript objects used as if they were decoders
 * of themselves
 */
declare type PrimitiveJsonLiteralForm = string;
declare type TupleJsonLiteralForm = [Decoder<unknown>, Decoder<unknown>];
declare type RecordJsonLiteralForm = {
    [key: string]: Decoder<unknown>;
};
export declare type JsonLiteralForm = PrimitiveJsonLiteralForm | TupleJsonLiteralForm | RecordJsonLiteralForm;
/**
 * Partialify record fields which can be `undefined`
 * helper functions
 */
declare const a: unique symbol;
declare type rem<t> = t extends typeof a ? never : t;
declare type undefinedKeys<T> = {
    [P in keyof T]: [undefined] extends [T[P]] ? P : never;
}[keyof T];
declare type addQuestionmarksToRecordFields<R extends {
    [s: string]: unknown;
}> = {
    [P in Exclude<keyof R, undefinedKeys<R>>]: R[P];
} & {
    [P in undefinedKeys<R>]?: R[P] | typeof a;
} extends infer P ? {
    [K in keyof P]: rem<P[K]>;
} : never;
/**
 * Run json literal decoder evaluation both at
 * type level and runtime level
 */
declare type evalJsonLiteralForm<decoder> = [
    decoder
] extends [PrimitiveJsonLiteralForm] ? decoder : [
    decoder
] extends [[infer decoderA, infer decoderB]] ? [
    decodeTypeRecur<decoderA>,
    decodeTypeRecur<decoderB>
] : addQuestionmarksToRecordFields<{
    [key in keyof decoder]: decodeTypeRecur<decoder[key]>;
}>;
/**
 * General decoder definition
 */
export declare type DecoderFunction<T> = (input: unknown) => T;
export declare type Decoder<T> = JsonLiteralForm | DecoderFunction<T>;
/**
 * Run evaluation of decoder at both type and
 * runtime level
 */
export declare type primitive = string | boolean | number | null | undefined;
declare type decodeTypeRecur<decoder> = (decoder extends DecoderFunction<infer T> ? [
    decodeTypeRecur<T>
] : decoder extends JsonLiteralForm ? [
    evalJsonLiteralForm<decoder>
] : [
    decoder
])[0];
export declare type decodeType<T> = decodeTypeRecur<T>;
export declare const decode: <D extends Decoder<unknown>>(decoder: D) => DecoderFunction<decodeType<D>>;
export declare function isKey<K>(value: unknown, keys: ReadonlyArray<K>): value is K;
export {};
