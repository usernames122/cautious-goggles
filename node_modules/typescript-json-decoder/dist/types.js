"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isKey = exports.decode = void 0;
var literal_decoders_1 = require("./literal-decoders");
var isPrimitiveJsonLiteralForm = function (v) { return typeof v === 'string'; };
var isTupleJsonLiteralForm = function (v) {
    return Array.isArray(v) && v.length === 2 && v.every(isDecoder);
};
var isRecordJsonLiteralForm = function (v) {
    return typeof v === 'object' && v !== null && Object.values(v).every(isDecoder);
};
var isJsonLiteralForm = function (decoder) {
    return (isPrimitiveJsonLiteralForm(decoder) ||
        isTupleJsonLiteralForm(decoder) ||
        isRecordJsonLiteralForm(decoder));
};
/**
 * Partialify record fields which can be `undefined`
 * helper functions
 */
var a = Symbol();
var decodeJsonLiteralForm = function (decoder) {
    if (isPrimitiveJsonLiteralForm(decoder)) {
        return literal_decoders_1.literal(decoder);
    }
    if (isTupleJsonLiteralForm(decoder)) {
        return literal_decoders_1.tuple(decoder[0], decoder[1]);
    }
    if (isRecordJsonLiteralForm(decoder)) {
        return literal_decoders_1.record(decoder);
    }
    throw "shouldn't happen";
};
var isDecoderFunction = function (f) {
    return typeof f === 'function';
};
var isDecoder = function (decoder) {
    return isJsonLiteralForm(decoder) || isDecoderFunction(decoder);
};
// >
var decode = function (decoder) {
    if (!isDecoderFunction(decoder)) {
        return decodeJsonLiteralForm(decoder);
    }
    return decoder;
};
exports.decode = decode;
function isKey(value, keys) {
    return keys.includes(value);
}
exports.isKey = isKey;
